ans =

    2.7183
    7.3891
   20.0855

octave:39> -v
ans =

  -1
  -2
  -3

octave:40> v + ones(length(v),1)
ans =

   2
   3
   4

octave:41> ones(3,1)
ans =

   1
   1
   1

octave:42> v + ones(3,1)
ans =

   2
   3
   4

octave:43> v + 1
ans =

   2
   3
   4

octave:44> A
A =

   1   2
   3   4
   5   6

octave:45> A'
ans =

   1   3   5
   2   4   6

octave:46> (A')'
ans =

   1   2
   3   4
   5   6

octave:47> [val,ind]=max(Q)
error: 'Q' undefined near line 1 column 14
error: evaluating argument list element number 1
octave:47> [val,ind]=max(A)
val =

   5   6

ind =

   3   3

octave:48> a = [1 15 2 0.3]
a =

    1.00000   15.00000    2.00000    0.30000

octave:49> val=max(a)
val =  15
octave:50> [val,ind]=max(a)
val =  15
ind =  2
octave:51> a < 3
ans =

   1   0   1   1

octave:52> find(a<3)
ans =

   1   3   4

octave:53> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:54> help magic
'magic' is a function from the file /usr/share/octave/3.8.1/m/special-matrix/magic.m

 -- Function File: magic (N)

     Create an N-by-N magic square.  A magic square is an arrangement of
     the integers '1:n^2' such that the row sums, column sums, and
     diagonal sums are all equal to the same value.

     Note: N must be greater than 2 for the magic square to exist.


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:55> 
octave:55> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:56> [r,c] = find(A >= 7)
r =

   1
   3
   2

c =

   1
   2
   3

octave:57> [1,1]
ans =

   1   1

octave:58> A(1,1)
ans =  8
octave:59> A(2,3)
ans =  7
octave:60> A(2,3) % these are the elements which are >= 7
ans =  7
octave:61> help find
'find' is a built-in function from the file libinterp/corefcn/find.cc

 -- Built-in Function: IDX = find (X)
 -- Built-in Function: IDX = find (X, N)
 -- Built-in Function: IDX = find (X, N, DIRECTION)
 -- Built-in Function: [i, j] = find (...)
 -- Built-in Function: [i, j, v] = find (...)
     Return a vector of indices of nonzero elements of a matrix, as a
     row if X is a row vector or as a column otherwise.  To obtain a
     single index for each matrix element, Octave pretends that the
     columns of a matrix form one long vector (like Fortran arrays are
     stored).  For example:

          find (eye (2))
            => [ 1; 4 ]

     If two outputs are requested, 'find' returns the row and column
     indices of nonzero elements of a matrix.  For example:

          [i, j] = find (2 * eye (2))
              => i = [ 1; 2 ]
              => j = [ 1; 2 ]

     If three outputs are requested, 'find' also returns a vector
     containing the nonzero values.  For example:

          [i, j, v] = find (3 * eye (2))
                 => i = [ 1; 2 ]
                 => j = [ 1; 2 ]
                 => v = [ 3; 3 ]

     If two inputs are given, N indicates the maximum number of elements
     to find from the beginning of the matrix or vector.

     If three inputs are given, DIRECTION should be one of "first" or
     "last", requesting only the first or last N indices, respectively.
     However, the indices are always returned in ascending order.

     Note that this function is particularly useful for sparse matrices,
     as it extracts the non-zero elements as vectors, which can then be
     used to create the original matrix.  For example:

          sz = size (a);
          [i, j, v] = find (a);
          b = sparse (i, j, v, sz(1), sz(2));

     See also: nonzeros.


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
octave:62> 
octave:62> a
a =

    1.00000   15.00000    2.00000    0.30000

octave:63> sum(a)
ans =  18.300
octave:64> prod(a) % returns product of all elements
ans =  9
octave:65> floor(a)
ans =

    1   15    2    0

octave:66> ceil(a)
ans =

    1   15    2    1

octave:67> rand(3)
ans =

   0.017591   0.770302   0.722514
   0.597202   0.391103   0.083850
   0.478231   0.028860   0.764840

octave:68> max(rand(3))
ans =

   0.76854   0.96705   0.80838

octave:69> r=rand(3)
r =

   0.1430006   0.9129766   0.9214635
   0.0099175   0.2468333   0.6289312
   0.0307002   0.8062129   0.1704410

octave:70> max(r)
ans =

   0.14300   0.91298   0.92146

octave:71> max(rand(3),rand(3))
ans =

   0.83512   0.43887   0.93161
   0.62163   0.97375   0.21130
   0.17407   0.82514   0.65143

octave:72> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:73> max(A,[],1)
ans =

   8   9   7

octave:74> % max(A,[],1) here 1 denotes the 1st dimension of vector i,e column
octave:74> max(A,[],2)
ans =

   8
   7
   9

octave:75> max(A,[],3)
ans =

   8   1   6
   3   5   7
   4   9   2

octave:76> max(A,[],4)
ans =

   8   1   6
   3   5   7
   4   9   2

octave:77> max(A)
ans =

   8   9   7

octave:78> max(max(A))
ans =  9
octave:79> A(:)
ans =

   8
   3
   4
   1
   5
   9
   6
   7
   2

octave:80> A = magic(9)
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:81> sum(A,1)
ans =

   369   369   369   369   369   369   369   369   369

octave:82> sum(A,2)
ans =

   369
   369
   369
   369
   369
   369
   369
   369
   369

octave:83> 
octave:83> A
A =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:84> eye(9)
ans =

Diagonal Matrix

   1   0   0   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   0   0   1

octave:85> A * eye(9)
ans =

   47   58   69   80    1   12   23   34   45
   57   68   79    9   11   22   33   44   46
   67   78    8   10   21   32   43   54   56
   77    7   18   20   31   42   53   55   66
    6   17   19   30   41   52   63   65   76
   16   27   29   40   51   62   64   75    5
   26   28   39   50   61   72   74    4   15
   36   38   49   60   71   73    3   14   25
   37   48   59   70   81    2   13   24   35

octave:86> A .* eye(9)
ans =

   47    0    0    0    0    0    0    0    0
    0   68    0    0    0    0    0    0    0
    0    0    8    0    0    0    0    0    0
    0    0    0   20    0    0    0    0    0
    0    0    0    0   41    0    0    0    0
    0    0    0    0    0   62    0    0    0
    0    0    0    0    0    0   74    0    0
    0    0    0    0    0    0    0   14    0
    0    0    0    0    0    0    0    0   35

octave:87> sum(A.*eye(9))
ans =

   47   68    8   20   41   62   74   14   35

octave:88> sum(sum(A.*eye(9)))
ans =  369
octave:90> flipud(eye(9)
> )
ans =

Permutation Matrix

   0   0   0   0   0   0   0   0   1
   0   0   0   0   0   0   0   1   0
   0   0   0   0   0   0   1   0   0
   0   0   0   0   0   1   0   0   0
   0   0   0   0   1   0   0   0   0
   0   0   0   1   0   0   0   0   0
   0   0   1   0   0   0   0   0   0
   0   1   0   0   0   0   0   0   0
   1   0   0   0   0   0   0   0   0

octave:91> sum(sum(A .* flipud(eye(9))))
ans =  369
octave:92> A = magic(3)
A =

   8   1   6
   3   5   7
   4   9   2

octave:93> pinv(A)
ans =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:94> temp = pinv(A)
temp =

   0.147222  -0.144444   0.063889
  -0.061111   0.022222   0.105556
  -0.019444   0.188889  -0.102778

octave:95> temp * A
ans =

   1.00000   0.00000  -0.00000
  -0.00000   1.00000   0.00000
   0.00000  -0.00000   1.00000

octave:96> A
A =

   8   1   6
   3   5   7
   4   9   2

octave:97> pwd
ans = /home/ajit/ml/computingData
octave:98> save computingData.var
octave:99> history -w computingData.hist
octave:100> 

